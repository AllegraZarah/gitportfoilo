-- CLIENT DAILY PORTFOLIO BALANCE
-- *** NOTE: This query is to recreate the historic table only and is not meant to update the table.
-- Another script handles incremental updates. ***

-- Drop the existing table if it exists
DROP TABLE IF EXISTS analytics_mart.anonymized_table_name;

-- Create anonymized_table_name Table
CREATE TABLE analytics_mart.anonymized_table_name (
    anonymized_date DATE,
    entity_id VARCHAR(25),
    asset_name TEXT,
    asset_code TEXT,
    asset_type TEXT,
    region_code TEXT,
    region_name TEXT,
    region_state TEXT,
    final_lien_units DOUBLE PRECISION,
    final_available_units DOUBLE PRECISION,
    final_total_units DOUBLE PRECISION,
    record_created_at TIMESTAMP,
    record_updated_at TIMESTAMP
);

-- Insert Historic Data Into The Table
WITH base_data AS (
    -- Select necessary fields from anonymized data logging and join with asset information
    SELECT 
        asset.asset_type, 
        asset.asset_code, 
        DATE(log.created_at) AS record_date, 
        log.client_id,
        log.transaction_category, 
        log.asset_id, 
        COALESCE(log.region_id, 0) AS adjusted_region_id,
        log.units, 
        log.lien_units_before, 
        log.lien_units_after, 
        log.available_units_before, 
        log.available_units_after,
        log.total_units_before, 
        log.total_units_after, 
        log.created_at, 
        log.updated_at
    FROM anonymized_logs.operation_data log
    LEFT JOIN analytics_mart.anonymized_asset asset
        ON log.asset_id = asset.id
    WHERE NOT (asset.asset_type = 'AssetType' AND log.region_id IS NULL)
),

transaction_index AS (
    -- Generate a row number for each transaction per day, per entity, per asset and region
    SELECT 
        ROW_NUMBER() OVER (PARTITION BY record_date, entity_id, asset_id, adjusted_region_id 
                           ORDER BY created_at DESC) AS daily_index, 
        *
    FROM base_data
),

indexed_data AS (
    -- Filter to get only the last transaction per day for each entity, asset, and region
    SELECT *
    FROM transaction_index
    WHERE daily_index = 1
),

all_dates_fields AS (
    -- Generate all dates for each entity and their portfolio (cross join with all entities, assets, and regions)
    SELECT 
        DATE(date_dimension.date_actual) AS anonymized_date,
        portfolio_data.entity_id, 
        portfolio_data.asset_id, 
        portfolio_data.adjusted_region_id
    FROM date_dimension.date_table date_dimension
    CROSS JOIN (
        SELECT DISTINCT entity_id, asset_id, adjusted_region_id 
        FROM indexed_data
    ) portfolio_data
    WHERE date_dimension.date_actual BETWEEN '2013-01-01' AND (CURRENT_DATE - 1)
),

everyday_and_transaction_day_only AS (
    -- Join the generated dates with transaction data, ensuring the transaction data is present for matching dates
    SELECT 
        adf.anonymized_date, 
        adf.entity_id, 
        adf.asset_id, 
        asset.asset_name, 
        asset.asset_code, 
        asset.asset_type, 
        adf.adjusted_region_id,
        entity.entity_code, 
        loc.region_code AS region_code, 
        loc.region_name AS region_name, 
        loc.region_state AS region_state,
        indexed_data.record_date, 
        indexed_data.transaction_category,  
        indexed_data.units, 
        indexed_data.lien_units_before, 
        indexed_data.lien_units_after, 
        indexed_data.available_units_before, 
        indexed_data.available_units_after,
        indexed_data.total_units_before, 
        indexed_data.total_units_after, 
        indexed_data.created_at, 
        indexed_data.updated_at,
        CASE 
            WHEN units IS NULL THEN 0 
            ELSE 1 
        END AS transaction_exists_flag,
        SUM(CASE 
                WHEN units IS NULL THEN 0 
                ELSE 1 
            END) OVER (PARTITION BY adf.entity_id, adf.asset_id, adf.adjusted_region_id 
                      ORDER BY adf.anonymized_date) AS running_total_transaction_day
    FROM all_dates_fields adf
    LEFT JOIN indexed_data 
        ON adf.anonymized_date = indexed_data.record_date
        AND adf.entity_id = indexed_data.entity_id
        AND adf.asset_id = indexed_data.asset_id
        AND adf.adjusted_region_id = indexed_data.adjusted_region_id
    LEFT JOIN analytics_mart.anonymized_asset asset
        ON adf.asset_id = asset.id
    LEFT JOIN crm_entities.entity entity
        ON adf.entity_id = entity.id
    LEFT JOIN crm_regions.region loc
        ON adf.adjusted_region_id = loc.id
),

final_data AS (
    -- Carry forward the last known balance for each day per entity, asset, and region
    SELECT *,
           FIRST_VALUE(lien_units_after) OVER (PARTITION BY entity_code, asset_id, adjusted_region_id, running_total_transaction_day 
                                               ORDER BY entity_code, anonymized_date) AS final_lien_units,
           FIRST_VALUE(available_units_after) OVER (PARTITION BY entity_code, asset_id, adjusted_region_id, running_total_transaction_day 
                                                    ORDER BY entity_code, anonymized_date) AS final_available_units,
           FIRST_VALUE(total_units_after) OVER (PARTITION BY entity_code, asset_id, adjusted_region_id, running_total_transaction_day 
                                                 ORDER BY entity_code, anonymized_date) AS final_total_units,
           COALESCE(created_at, FIRST_VALUE(created_at) OVER (PARTITION BY entity_code, asset_id, adjusted_region_id, running_total_transaction_day 
                                                        ORDER BY entity_code, anonymized_date)) AS record_created_at,
           COALESCE(updated_at, FIRST_VALUE(updated_at) OVER (PARTITION BY entity_code, asset_id, adjusted_region_id, running_total_transaction_day 
                                                        ORDER BY entity_code, anonymized_date)) AS record_updated_at
    FROM everyday_and_transaction_day_only
)

-- Final selection of data to insert into the fact table
INSERT INTO analytics_mart.anonymized_table_name (
    anonymized_date, entity_code, asset_name, asset_code, asset_type, region_code, 
    region_name, region_state, final_lien_units, final_available_units, final_total_units, 
    record_created_at, record_updated_at
)
SELECT 
    anonymized_date, 
    entity_code, 
    asset_name, 
    asset_code, 
    asset_type, 
    region_code, 
    region_name, 
    region_state, 
    final_lien_units, 
    final_available_units, 
    final_total_units, 
    record_created_at, 
    record_updated_at
FROM final_data
ORDER BY anonymized_date DESC, entity_code, asset_id, adjusted_region_id;
