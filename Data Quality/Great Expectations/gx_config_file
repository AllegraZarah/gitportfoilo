# %% [markdown]
# # Great Expectations - Transaction Data Validation

# %% [markdown]
# ## Install & Set up Great Expectations

# %%
# Install required Libraries
!pip install great_expectations
!pip install python-dotenv
!pip install sqlalchemy
!pip install psycopg2
!pip install ydata-profiling

# %%
# Set up the environment with required libraries
import great_expectations as gx
import sys
import os
import pandas as pd
import numpy as np
from sqlalchemy import create_engine
from sqlalchemy import text
from datetime import datetime
from dotenv import load_dotenv

# %%
# Load environment variables
load_dotenv()

# %%
# Retrieve Data Context
path_to_context_root_dir = '[YOUR_GREAT_EXPECTATIONS_PATH]'
context = gx.get_context(context_root_dir=path_to_context_root_dir)

# %%
# Connect to DataSource using environment variables
db_address = os.getenv("DB_ADDRESS")
db_name = os.getenv("DB_NAME")
db_user = os.getenv("DB_USERNAME")
db_password = os.getenv("DB_PASSWORD")

connection_string = f"postgresql+psycopg2://{db_user}:{db_password}@{db_address}/{db_name}"

# %% [markdown]
# #### Create Data Asset

# %%
# Create database connection
pg_datasource = context.sources.add_or_update_postgres(
    name="transactions_datasource",
    connection_string=connection_string
)

# %%
# Add table asset
data_asset = pg_datasource.add_table_asset(
    name="transactions",
    table_name="transactions",
    schema_name="public"
)

# %%
# Create pandas dataframe from database
engine = create_engine(connection_string)
conn = engine.connect().execution_options(stream_results=True)
df_transactions = pd.read_sql_table("transactions", conn, "public")

# %%
# Add pandas dataframe as data asset
pandas_datasource = context.sources.add_pandas(name="pandas_datasource")
df_asset_name = 'pandas_transactions'
data_asset_pandas = pandas_datasource.add_dataframe_asset(name=df_asset_name)

# %% [markdown]
# ## Create Expectation Suite

# %%
# Create batch request
batch_request = data_asset_pandas.build_batch_request(dataframe=df_transactions)

# %%
# Create expectation suite
expectation_suite_name = "transactions_expectations"
expectation_suite = context.add_or_update_expectation_suite(
    expectation_suite_name=expectation_suite_name
)

# %%
# Create validator
validator = context.get_validator(
    batch_request=batch_request,
    expectation_suite_name=expectation_suite_name
)

# %% [markdown]
# ### Define Expectations

# %%
# Example expectations - modify based on your needs
validator.expect_table_columns_to_match_set(
    column_set=['transaction_id', 'amount', 'currency', 'status', 'created_at']
)

validator.expect_column_values_to_not_be_null(column='transaction_id')
validator.expect_column_values_to_be_unique(column='transaction_id')

validator.expect_column_values_to_be_of_type(
    column='amount',
    type_='FLOAT',
    mostly=1.0
)

validator.expect_column_values_to_be_of_type(
    column='status',
    type_='STR',
    mostly=1.0
)

validator.expect_column_values_to_be_of_type(
    column='created_at',
    type_='TIMESTAMP',
    mostly=1.0
)

# Add more expectations as needed

# %%
# Save expectation suite
validator.save_expectation_suite(discard_failed_expectations=False)

# %% [markdown]
# ## Validate Data

# %%
# Create and run checkpoint
checkpoint_name = "transactions_checkpoint"
checkpoint = context.add_or_update_checkpoint(
    name=checkpoint_name,
    validator=validator
)

validation_result = context.run_checkpoint(checkpoint_name=checkpoint_name)

if validation_result["success"]:
    print("Validation succeeded!")
else:
    print("Validation failed!")

# %% [markdown]
# ## Generate Documentation

# %%
# Build and open data docs
context.build_data_docs()
context.open_data_docs()
